import mongoose from 'mongoose';

if (!process.env.MONGO_URI) {
    console.error('MONGO_URI environment variable is not defined');
    process.exit(1);
}

let cachedConnection: typeof mongoose | null = null;
let isConnecting = false;

const connectDB = async (mongoUri: string) => {
    // –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if (cachedConnection && mongoose.connection.readyState === 1) {
        console.log('Using cached database connection.');
        return cachedConnection;
    }

    // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∂–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if (isConnecting) {
        console.log('Connection in progress, waiting...');
        // –ñ–¥–µ–º –ø–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∏–ª–∏ –Ω–µ —É–ø–∞–¥–µ—Ç
        while (isConnecting && mongoose.connection.readyState === 2) {
            await new Promise((resolve) => setTimeout(resolve, 100));
        }
        if (mongoose.connection.readyState === 1) {
            return cachedConnection;
        }
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
    if (cachedConnection && mongoose.connection.readyState !== 1) {
        try {
            await mongoose.disconnect();
        } catch (err) {
            console.log('Error disconnecting:', err);
        }
        cachedConnection = null;
    }

    isConnecting = true;

    try {
        console.log('Establishing new database connection...');

        const options = {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è serverless –æ–∫—Ä—É–∂–µ–Ω–∏—è
            serverSelectionTimeoutMS: 30000,
            connectTimeoutMS: 30000,
            socketTimeoutMS: 30000,

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è replica set
            retryWrites: true,
            w: 'majority' as const,

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ –¥–ª—è serverless
            maxPoolSize: 5,
            minPoolSize: 0, // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 0 –¥–ª—è serverless
            maxIdleTimeMS: 30000,

            // –í–ê–ñ–ù–û: –í–∫–ª—é—á–∞–µ–º –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫
            // bufferMaxEntries: 0,
            bufferCommands: true, // –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

            // IPv4 –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            family: 4,

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            heartbeatFrequencyMS: 2000,
            // serverSelectionRetryDelayMS: 2000,
        };

        const connection = await mongoose.connect(mongoUri, options);

        // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await new Promise<void>((resolve, reject) => {
            if (mongoose.connection.readyState === 1) {
                resolve();
            } else {
                const timeout = setTimeout(() => {
                    reject(new Error('Connection timeout'));
                }, 15000);

                mongoose.connection.once('connected', () => {
                    clearTimeout(timeout);
                    resolve();
                });

                mongoose.connection.once('error', (err) => {
                    clearTimeout(timeout);
                    reject(err);
                });
            }
        });

        cachedConnection = connection;
        console.log('‚úÖ Database connected successfully');

        return connection;
    } catch (error: any) {
        cachedConnection = null;
        console.error('‚ùå Database connection failed:', error.message);
        throw error;
    } finally {
        isConnecting = false;
    }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
mongoose.connection.on('connected', () => {
    console.log('üü¢ Mongoose connected to MongoDB Atlas');
});

mongoose.connection.on('error', (err) => {
    console.error('üî¥ Mongoose connection error:', err);
    cachedConnection = null;
    isConnecting = false;
});

mongoose.connection.on('disconnected', () => {
    console.log('üü° Mongoose disconnected');
    cachedConnection = null;
    isConnecting = false;
});

mongoose.connection.on('reconnected', () => {
    console.log('üîÑ Mongoose reconnected');
});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export const isConnected = (): boolean => {
    return mongoose.connection.readyState === 1;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
export const getConnectionStatus = (): string => {
    const states = ['disconnected', 'connected', 'connecting', 'disconnecting'];
    return states[mongoose.connection.readyState] || 'unknown';
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export const waitForConnection = async (timeout = 10000): Promise<void> => {
    if (isConnected()) return;

    return new Promise((resolve, reject) => {
        const timeoutId = setTimeout(() => {
            reject(new Error('Connection timeout'));
        }, timeout);

        const checkConnection = () => {
            if (isConnected()) {
                clearTimeout(timeoutId);
                resolve();
            } else {
                setTimeout(checkConnection, 100);
            }
        };

        checkConnection();
    });
};

export default connectDB;
